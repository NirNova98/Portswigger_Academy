Vulnerability:
	The server does not verify that the authorization code is sent from the same browser that initiated the OAuth flow.
	Allowing an attacker to make other users link their blog accounts to the attacker’s social account.
	
Exploit:
	- You press on “Attach social profile” to obtain a fresh code.
	- Trick the victim’s browser into sending the callback request with that code.
	
Explanation:
	- Log in to your account.
	- Click the "Attach a social profile", which makes the OAuth server generate a random authorization code.
	- This code is your temporary social identity value.
	- To send this code back to the blog on the victim’s behalf, host a script on your exploit server:
		<script>
			window.location ="https://server.net/oauth-linking?code=[OUR_SOCIAL_IDENTITY_CODE]";
		</script>
	- Send the victim a link to the page that hosts this script.
	- By that, the victim unintentionaly will send a request to the blog, requesting to attach his account with our social account.
	
	**'window.location' works because it forces the victim’s browser to make the GET, automatically including its cookies**
	
Prevention:
	- Add a state / CSRF token at the start of the process to make sure that the same browser performing the action (enforced by the Same-Origin Policy).
